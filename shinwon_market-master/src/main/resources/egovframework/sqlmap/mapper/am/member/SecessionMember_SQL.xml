<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="SecessionMember">
	<!-- 탈퇴회원 검색 조건 -->
    <sql id="SecessionMemberWhere">
        <if test="searchSecStartDate != null and searchSecStartDate != '' and searchSecEndDate != null and searchSecEndDate != ''">
            AND TMV.MEM_MST_LEV_DT BETWEEN REPLACE(TRIM(#{searchSecStartDate}),'-', '')||'000000' AND REPLACE(TRIM(#{searchSecEndDate}),'-', '')||'235959'
        </if>
        <if test="searchSecStartDate != null and searchSecStartDate != '' and searchSecEndDate != null and searchSecEndDate != ''">
            AND TMV.MEM_MST_LEV_DT BETWEEN REPLACE(TRIM(#{searchInfoStartDate}),'-', '')||'000000' AND REPLACE(TRIM(#{searchInfoEndDate}),'-', '')||'235959'
        </if>
        <if test="searchId != null and searchId != ''">
            AND TMV.MEM_MST_MEM_ID LIKE TRIM(#{searchId}) || '%'
        </if>
        <if test="searchNm != null and searchNm != ''">
            AND TMV.MEM_MST_MEM_NM LIKE TRIM(#{searchNm}) || '%'
        </if>
        <if test="searchSecType != null and searchSecType != ''">
            AND TMV.MEM_MST_LEV_YN = TRIM(#{searchSecType})
        </if>
        <if test="searchSecReason != null and searchSecReason != ''">
            AND TMV.MEM_MST_LEV_RSN_CD = TRIM(#{searchSecReason})
        </if>
    </sql>
    
    <!-- 관리자 > 회원관리 > 탈퇴회원관리 목록 갯수 -->
    <select id="selectSecessionMemberListCount" parameterType="HashMap" resultType="Integer">
    	/* SecessionMember.selectSecessionMemberListCount */
    	SELECT
    		COUNT(1)
    	FROM	
    		T_MEM_VIEW TMV 
    	WHERE
    		TMV.MEM_MST_LEV_YN <![CDATA[ <> ]]> 'N'
    		<include refid="SecessionMemberWhere"/>
    </select>
    
    <!-- 관리자 > 회원관리 > 탈퇴회원관리 목록 -->
    <select id="selectSecessionMemberList" parameterType="HashMap" resultType="HashMap">
    	/* SecessionMember.selectSecessionMemberList */	
    	SELECT
    		S2.*
    	FROM
    	(
    		SELECT
	    		ROWNUM AS RNUM,
	    		S1.*
	    	FROM
	    	(
	    		SELECT
		    		TMV.MEM_MST_MEM_ID,
		    		MEM_MST_MEM_NM,
		    		MEM_MST_MEM_GBN,
		    		MEM_MST_REG_DT,
		    		MEM_MST_LEV_DT,
		    		MEM_MST_LEV_YN,
		    		MEM_MST_LEV_RSN_CD,
		    		(SELECT CMN_COM_NM FROM T_CMM_COM TCC WHERE TCC.CMN_COM_IDX = TMV.MEM_MST_LEV_RSN_CD) AS MEM_MST_LEV_RSN_CD_NM,
		    		MEM_MST_LEV_RSN,
		    		TMS.MEM_MST_UPD_DT 
		    	FROM
		    		T_MEM_VIEW TMV INNER JOIN (SELECT tms.MEM_MST_UPD_DT,tms.MEM_MST_MEM_ID FROM T_MEM_MST tms) TMS ON TMV.MEM_MST_MEM_ID = TMS.MEM_MST_MEM_ID
		    	WHERE
					MEM_MST_LEV_YN <![CDATA[ <> ]]> 'N'
		    		<include refid="SecessionMemberWhere"/>
		    	ORDER BY MEM_MST_LEV_DT DESC
	    	) S1
    	) S2
        <if test="startNum != null and startNum != '' and endNum != null and endNum != ''">
            WHERE S2.RNUM BETWEEN #{startNum} AND #{endNum} 
        </if>   
    </select>
    
    
    <select id="selectSecessionMemberListExcel" parameterType="HashMap" resultType="HashMap">
    	/* SecessionMember.selectSecessionMemberListExcel */	
    	SELECT
    		S2.*
    	FROM
    	(
    		SELECT
	    		ROWNUM AS RNUM,
	    		S1.*
	    	FROM
	    	(
                SELECT
                    TMV.MEM_MST_MEM_ID,
                    TMM.MEM_MST_ERP_ID ,
                    TMV.MEM_MST_MEM_NM,
                    TMI.MEM_IPN_SEX,
                    DECODE( TMI.MEM_IPN_SEX , 'M' , '남성' , 'F' , '여성' , '') AS MEM_IPN_SEX_NM , 
                    TMI.MEM_IPN_BIR,
                    '양력' as BIR_TYPE, 
                    'Y' as REAL_NAME_CHECK , 
                    TMV.MEM_MST_MEM_GBN,
                    (SELECT CMN_COM_NM FROM T_CMM_COM TCC WHERE TCC.CMN_COM_IDX = TMV.MEM_MST_MEM_GBN) AS MEM_MST_MEM_GBN_NM,
                    (SELECT CMN_COM_NM FROM T_CMM_COM TCC WHERE TCC.CMN_COM_IDX = TMV.MEM_MST_MEM_GRD) AS MEM_MST_MEM_GRD,
                    TMD.MEM_DLV_ZIP_CDE5 AS MEM_MST_ZIP_CDE5 ,
                    TMD.MEM_DLV_DRO_ADR1 AS MEM_MST_DRO_ADR1,
                    TMD.MEM_DLV_DRO_ADR2 AS MEM_MST_DRO_ADR2,                    
                    REPLACE( TMM.MEM_MST_TEL3 || '-' || TMM.MEM_MST_TEL3 || '-' || TMM.MEM_MST_TEL3 , '--' , '')  AS MEM_MST_TEL,
                    REPLACE( TMV.MEM_MST_HP1 || '-' || TMV.MEM_MST_HP2 || '-' || TMV.MEM_MST_HP3 , '--' , '')  AS MEM_MST_HP,
                    TMV.MEM_MST_MAIL,                    
                    NVL(( SELECT MEM_PIT_TOT_PIT FROM (SELECT * FROM T_MEM_PIT     TMP ORDER BY MEM_PIT_REG_DT DESC ) TMP WHERE TMP.MEM_PIT_MEM_ID = TMV.MEM_MST_MEM_ID AND ROWNUM = 1),0) AS MEM_E_POINT  ,
                    NVL(( SELECT MEM_PIT_TOT_PIT FROM (SELECT * FROM T_MEM_PIT_SW  TMP ORDER BY MEM_PIT_REG_DT DESC ) TMP WHERE TMP.MEM_PIT_MEM_ID = TMV.MEM_MST_MEM_ID AND ROWNUM = 1),0) AS MEM_SW_POINT ,
                    NVL(( SELECT MEM_PIT_TOT_PIT FROM (SELECT * FROM T_MEM_PIT_TOT TMP ORDER BY MEM_PIT_REG_DT DESC ) TMP WHERE TMP.MEM_PIT_MEM_ID = TMV.MEM_MST_MEM_ID AND ROWNUM = 1),0) AS MEM_TOT_POINT,                                                            
                    TO_CHAR(TO_DATE(TMV.MEM_MST_REG_DT,'YYYYMMDDHH24MISS'),'YYYY.MM.DD') AS MEM_REG_DT ,
                    TO_CHAR(TO_DATE(TMV.MEM_MST_REG_DT,'YYYYMMDDHH24MISS'),'HH24:MI:SS') AS MEM_REG_TM , 
                    NVL( TMV.MEM_MST_UPD_IP  , TMV.MEM_MST_REG_IP ) AS  MEM_MST_UPD_IP,	
                    (SELECT MEM_AGR_TRM_YN  FROM T_MEM_AGR TMA WHERE TMV.MEM_MST_MEM_ID = TMA.MEM_AGR_MEM_ID AND TMA.MEM_AGR_TRM_CD = '0001') AS SMS_YN , 
                    (SELECT MEM_AGR_TRM_YN  FROM T_MEM_AGR TMA WHERE TMV.MEM_MST_MEM_ID = TMA.MEM_AGR_MEM_ID AND TMA.MEM_AGR_TRM_CD = '0004') AS EMAIL_YN , 
                    (SELECT MEM_AGR_TRM_YN  FROM T_MEM_AGR TMA WHERE TMV.MEM_MST_MEM_ID = TMA.MEM_AGR_MEM_ID AND TMA.MEM_AGR_TRM_CD = '0006') AS KAKAO_YN , 
                    ( select count(*) as TOT_ORD_CNT from T_ORD_MST TOM where   TMV.MEM_MST_MEM_ID = TOM.ord_mst_ord_id ) AS TOT_ORD_CNT , -- 누적주문건수
                    NVL(( select SUM( ORD_MST_PAY_PRC ) as TOT_ORD_PAY from T_ORD_MST TOM where   TMV.MEM_MST_MEM_ID = TOM.ord_mst_ord_id ),0) AS TOT_ORD_PAY , -- 누적실결제금액
                    NVL(( select count(*) as REAL_ORD_CNT from T_ORD_MST TOM where   TMV.MEM_MST_MEM_ID = TOM.ord_mst_ord_id AND TOM.ORD_MST_PAY_TYPE = '409' ),0) AS REAL_ORD_CNT , -- 누적주문건수
                    NVL(( select SUM( ORD_MST_PAY_PRC ) as REAL_ORD_PAY from T_ORD_MST TOM where   TMV.MEM_MST_MEM_ID = TOM.ord_mst_ord_id AND TOM.ORD_MST_PAY_TYPE = '409' ),0) AS REAL_ORD_PAY , -- 누적실결제금액                    
                    NVL(( SELECT TO_CHAR(TO_DATE(ORD_MST_ORD_DT,'YYYYMMDDHH24MISS'),'YYYY.MM.DD')  FROM (SELECT * FROM T_ORD_MST  TOM  ORDER BY ORD_MST_ORD_DT DESC ) TMP WHERE TMV.MEM_MST_MEM_ID = TMP.ord_mst_ord_id AND ROWNUM = 1),'')  AS LAST_ORD_DT  ,
                    DECODE( ( SELECT COUNT(*) AS TOT_CNT  FROM T_MEM_SPC_PRV  MSP  WHERE    TMV.MEM_MST_MEM_ID = MSP.mem_mst_mem_id  and MSP.CMN_COM_IDX = '3628'  )  , 0 , 'N' , 'Y' ) AS REVIEWER_TYPE ,
                    ( SELECT COUNT( DISTINCT EVT_MST_IDX)  FROM  T_EVT_ETR TEE WHERE TEE.EVT_ETR_WIN_YN = 'Y' AND TMV.MEM_MST_MEM_ID =  TEE.EVT_ETR_REG_ID  ) AS EVT_COUNT_ETR ,
                    ( SELECT COUNT( DISTINCT EVT_MST_IDX)  FROM  T_EVT_IMG  TEE WHERE TEE.EVT_IMG_WIN_YN = 'Y' AND TMV.MEM_MST_MEM_ID =  TEE.EVT_IMG_REG_IP  ) AS EVT_COUNT_IMG ,
                    ( SELECT COUNT( DISTINCT EVT_MST_IDX)  FROM  T_EVT_RPL TEE WHERE TEE.EVT_RPL_WIN_YN = 'Y' AND TMV.MEM_MST_MEM_ID =  TEE.EVT_RPL_REG_IP  ) AS EVT_COUNT_RPL ,
                    ( SELECT COUNT( DISTINCT EVT_MST_IDX )  FROM T_EVT_SVY S, T_EVT_DTL D WHERE S.EVT_SVY_WIN_YN = 'Y' AND S.EVT_DTL_IDX = D.EVT_DTL_IDX AND TMV.MEM_MST_MEM_ID =  S.EVT_SVY_REG_ID   ) AS EVT_COUNT_SVY ,
                    TMM.MEM_MST_LEV_RSN_CD,
		    		(SELECT CMN_COM_NM FROM T_CMM_COM TCC WHERE TCC.CMN_COM_IDX = TMM.MEM_MST_LEV_RSN_CD) AS MEM_MST_LEV_RSN_CD_NM,
		    		TMM.MEM_MST_LEV_RSN ,
		    		TO_CHAR( TO_DATE ( TMM.MEM_MST_LEV_DT , 'YYYYMMDDHH24MISS') , 'YYYY-MM-DD HH24:MI:SS') AS MEM_MST_LEV_DT
                FROM T_MEM_VIEW TMV
                     LEFT OUTER  JOIN T_MEM_IPN TMI ON TMV.MEM_MST_MEM_ID = TMI.MEM_MST_MEM_ID 
                     INNER JOIN T_MEM_MST TMM ON TMV.MEM_MST_MEM_ID = TMM.MEM_MST_MEM_ID   
                     LEFT OUTER  JOIN T_MEM_DLV TMD ON TMV.MEM_MST_MEM_ID = TMD.MEM_MST_MEM_ID AND TMD.MEM_DLV_USE_YN = 'Y' AND TMD.MEM_DLV_BSC_YN = 'Y' 
		    	WHERE
					TMV.MEM_MST_LEV_YN <![CDATA[ <> ]]> 'N'
		    		<include refid="SecessionMemberWhere"/>
		    	ORDER BY TMV.MEM_MST_LEV_DT DESC
	    	) S1  
    	) S2
        <if test="startNum != null and startNum != '' and endNum != null and endNum != ''">
            WHERE S2.RNUM BETWEEN #{startNum} AND #{endNum} 
        </if>   
    </select>
    
    <delete id="deleteRestMember" parameterType="hashMap">
         /* SecessionMember.deleteRestMember */
    	 DELETE FROM T_MEM_MST
    	  WHERE MEM_MST_MEM_ID IN
    	 <foreach collection="MEMBER_LIST" item="item" index="index" separator="," open="(" close=")">
		    #{item}
		 </foreach>    	  
    </delete>

    
    
        
    
</mapper>